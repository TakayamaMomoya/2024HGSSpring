//*****************************************************
//
// スコアの処理[score.cpp]
// Author:髙山桃也
//
//*****************************************************

//*****************************************************
// インクルード
//*****************************************************
#include "score.h"
#include "debugproc.h"

//*****************************************************
// 定数定義
//*****************************************************
namespace
{

}

//*****************************************************
// 静的メンバ変数宣言
//*****************************************************
CScore *CScore::m_pScore = nullptr;	// 自身のポインタ

//=====================================================
// コンストラクタ
//=====================================================
CScore::CScore(int nPriority) : CObject(nPriority)
{
	m_nScore = 0;
}

//=====================================================
//	デストラクタ
//=====================================================
CScore::~CScore()
{

}

//=====================================================
// 生成処理
//=====================================================
CScore *CScore::Create(void)
{
	if (m_pScore == nullptr)
	{
		m_pScore = new CScore;

		if (m_pScore != nullptr)
		{
			m_pScore->Init();
		}
	}

	return m_pScore;
}

//=====================================================
// 初期化処理
//=====================================================
HRESULT CScore::Init(void)
{
	return S_OK;
}

//=====================================================
// 終了処理
//=====================================================
void CScore::Uninit(void)
{
	Release();
}

//=====================================================
// 更新処理
//=====================================================
void CScore::Update(void)
{

}

//=====================================================
// スコア加算
//=====================================================
void CScore::AddScore(int nValue)
{
	m_nScore += nValue;
}

//=====================================================
// 描画処理
//=====================================================
void CScore::Draw(void)
{
	CDebugProc *pDebug = CDebugProc::GetInstance();

	if (pDebug != nullptr)
	{
		pDebug->Print("\nスコア[%d]", m_nScore);
	}
}